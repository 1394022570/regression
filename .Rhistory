body<-function(){
e$m[e$lastx,e$lasty]<-0
e$m[e$head[1],e$head[2]]<-e$col_head
if(length(index(e$col_fruit))<0){
e$tail<-rbind(e$tail,data.frame(x=e$lastx,y=e$lasty))
}
if(nrow(e$tail)>0){
e$tail<-rbind(e$tail,data.frame(x=e$lastx,y=e$lasty))
e$m[e$tail[1,]$x,e$tail[1,]$y]<-e$col_path
e$tail<-e$tail[-1,]
e$m[e$lastx,e$lasty]<-e$col_tail
}
print(paste("snake idx",index(e$col_head)))
pritt(paste("snake axis:",e$head[1],e$head[2]))
}
drawTable<-function(){
plot(0,0,xlim=c(0,1),ylim=c(0,1),type='n',xaxs="i",yaxs="i")
}
drawMatrix<-function(){
idx<-which(e$m>0)
px<- (ifelse(idx%%e$width==0,e$width,idx%%e$width)-1)/e$width+e$step/2
py<- (ceiling(idx/e$height)-1)/e$height+e$step/2
pxy<-data.frame(x=px,y=py,col=e$m[idx])
points(pxy$x,pxy$y,col=pxy$col,pch=15,cex=4.4)
}
fruit()
head()
if(!fail()){
body()
drawTable()
drawMatrix()
}
}
stage0<-function(){
plot(0,0,xlim=c(0,1),ylim=c(0,1),type='n',xaxs="i", yaxs="i")
text(0.5,0.7,label="Snake Game",cex=5)
text(0.5,0.4,label="Any keyboard to start",cex=2,col=4)
text(0.5,0.3,label="Up,Down,Left,Right to control direction",cex=2,col=2)
}
stage2<-function(){
e$sage<-2
plot(0,0,xlim=c(0,1),ylim=c(0,1),type='n',xaxs="i",yaxs="i")
text(0.5,0.7,label="Game Over",cex=5)
text(0.5,0.4,label="Space to restart, q to quit.",cex=2,col=4)
text(0.5,0,3,label=paste("Congratulations! You have eat",nrow(e$tail),"fruits!"),cex=2,col=2)
}
keydown<-function(K){
print(paste("keydown:",K,",stage:",e$stage));
if(e$stage==0){
init()
stage1()
return(NULL)
}
if(e$stage==2){
if(K=="q") q()
else if(K==' ') stage0()
return(NULL)
}
if(e$stage==1){
if(K == "q"){
stage2()
} else {
if(tolower(K) %in% c("up","down","left","right")){
e$lastd<-e$dir
e$dir<-tolower(K)
stage1()
}
}
}
return(NULL)
}
run<-function(){
par(mai=rep(0,4),oma=rep(0,4))
e<<-new.env()
stage0()
getGraphicsEvent(prompt="Snake Game",onKeybd=keydown)
}
run()
init<-function(){
e<<-new.env()
e$stage<-0
e$width<-e&height<-20
e$step<-1/e$width
e$m<-matrix(rep(0,e$width*e$height),nrow = e$width)
s$dir<-e$lasted<-'up'
e&head<-c(2,2)
e$lastx<-e$lasty<-2
e$tail<-data.frame(x=c(),y=c())
e$col_fruit<-2
e$col_head<-4
e$col_tail<-8
e$col_path<-0
}
index<-function(col) which(e$m==col)
stage1<-function(){
e$stage<-1
fruit<-function(){
if(length(index(e$col_fruit))<=0){
idx<-sample(index(e$col_path),1)
fx<-ifelse(idx%%e$width==0,10,idx%%e$width)
fy<-ceiling(idx/e$height)
e$m[fx,fy]<-e$col_fruit
print(paste("fruit idx,idx"))
print(paste("fruit axis:",fx,fy))
}
}
fail<-function(){
if(length(which(e$head<1))>0 | length(which(e$head>e$width))>0){
print("game over: Out of ledge.")
keydown('q')
return(TRUE)
}
if(e$m[e$head[1],e$head[2]]==e$col_tail){
print("game over: head hit tail.")
keydown('q')
return(TRUE)
}
return(FALSE)
}
head<-function(){
e$lastx<-e$head[1]
e$lasty<-e$head[2]
if(e$dir=='up') e$head[2]<-e$head[2]+1
if(e$dir=='down') e$head[2]<-e$head[2]-1
if(e$dir=='right') e$head[1]<-e$head[1]+1
if(e$dir=='left') e$head[1]<-e$head[1]-1
}
body<-function(){
e$m[e$lastx,e$lasty]<-0
e$m[e$head[1],e$head[2]]<-e$col_head
if(length(index(e$col_fruit))<0){
e$tail<-rbind(e$tail,data.frame(x=e$lastx,y=e$lasty))
}
if(nrow(e$tail)>0){
e$tail<-rbind(e$tail,data.frame(x=e$lastx,y=e$lasty))
e$m[e$tail[1,]$x,e$tail[1,]$y]<-e$col_path
e$tail<-e$tail[-1,]
e$m[e$lastx,e$lasty]<-e$col_tail
}
print(paste("snake idx",index(e$col_head)))
pritt(paste("snake axis:",e$head[1],e$head[2]))
}
drawTable<-function(){
plot(0,0,xlim=c(0,1),ylim=c(0,1),type='n',xaxs="i",yaxs="i")
}
drawMatrix<-function(){
idx<-which(e$m>0)
px<- (ifelse(idx%%e$width==0,e$width,idx%%e$width)-1)/e$width+e$step/2
py<- (ceiling(idx/e$height)-1)/e$height+e$step/2
pxy<-data.frame(x=px,y=py,col=e$m[idx])
points(pxy$x,pxy$y,col=pxy$col,pch=15,cex=4.4)
}
fruit()
head()
if(!fail()){
body()
drawTable()
drawMatrix()
}
}
stage0<-function(){
plot(0,0,xlim=c(0,1),ylim=c(0,1),type='n',xaxs="i", yaxs="i")
text(0.5,0.7,label="Snake Game",cex=5)
text(0.5,0.4,label="Any keyboard to start",cex=2,col=4)
text(0.5,0.3,label="Up,Down,Left,Right to control direction",cex=2,col=2)
}
stage2<-function(){
e$sage<-2
plot(0,0,xlim=c(0,1),ylim=c(0,1),type='n',xaxs="i",yaxs="i")
text(0.5,0.7,label="Game Over",cex=5)
text(0.5,0.4,label="Space to restart, q to quit.",cex=2,col=4)
text(0.5,0,3,label=paste("Congratulations! You have eat",nrow(e$tail),"fruits!"),cex=2,col=2)
}
keydown<-function(K){
print(paste("keydown:",K,",stage:",e$stage));
if(e$stage==0){
init()
stage1()
return(NULL)
}
if(e$stage==2){
if(K=="q") q()
else if(K==' ') stage0()
return(NULL)
}
if(e$stage==1){
if(K == "q"){
stage2()
} else {
if(tolower(K) %in% c("up","down","left","right")){
e$lastd<-e$dir
e$dir<-tolower(K)
stage1()
}
}
}
return(NULL)
}
run<-function(){
par(mai=rep(0,4),oma=rep(0,4))
e<<-new.env()
stage0()
getGraphicsEvent(prompt="Snake Game",onKeybd=keydown)
}
run()
library(lawstat)
install.packages("lawstat")
par(mfrow=c(1,3))
y1 <- rep(c(1,0),5)
y2 <- c(rep(1,5),rep(0,5))
y3 <- c(1,0,0,1,1,1,1,0,0,0)
runs.test(y1,plot.it=T)
runs.test(y2,plot.it=T)
runs.test(y3,plot.it=T)
library(lawstat)
par(mfrow=c(1,3))
y1 <- rep(c(1,0),5)
y2 <- c(rep(1,5),rep(0,5))
y3 <- c(1,0,0,1,1,1,1,0,0,0)
runs.test(y1,plot.it=T)
runs.test(y2,plot.it=T)
runs.test(y3,plot.it=T)
rep(1,5)
rep((1,0),5)
rep(c(1,0),5)
？lqs
?lqs
?mass
?MASS
?mass
?lqs()
library(MASS)
?lqs
library(MASS)
data = read.csv('C:/Users/caokefan/Desktop/regana/7_5.csv')
data
lm<-lqs(data$y~data$x1,method="lms")
lm
summary(lm)
lm<-lqs(y~x1,data,method="lms")
lm
data <- read.csv('bank-additional-full.csv')
data <- read.csv('bank-additional-full.csv')
data <- read.csv('./bank-additional-full.csv')
data <- read.csv('C:\Users\caokefan\Desktop\regana\bank-additional-full.csv')
data <- read.csv('C:/Users/caokefan/Desktop/regana/bank-additional-full.csv')
data
View(data)
data <- read.csv('C:/Users/caokefan/Desktop/regana/bank-additional.csv')
data
data <- read.table('housing.data')
data <- read.table('C:/Users/caokefan/Desktop/regana/housing.data')
data
library(xlsx)
data <- read.xlsx('C:/Users/caokefan/Desktop/regana/Boston.xlsx',1)
data <- read.xlsx('C:/Users/caokefan/Desktop/regana/Boston.xlsx',1)
data
View(data)
data <- read.table('C:/Users/caokefan/Desktop/regana/housing.data')
data
View(data)
View(data)
library(xlsx)
data <- read.table('C:/Users/caokefan/Desktop/regana/housing.data')
write.csv(data, file = 'C:/Users/caokefan/Desktop/regana/housing.csv')
data <- read.csv(data, file = 'C:/Users/caokefan/Desktop/regana/housing.csv')
data <- read.csv('C:/Users/caokefan/Desktop/regana/housing.csv')
data
library(car)
library(MASS)
library(lmtest)
data <- read.csv('BostonHousePrice.csv')
data <- data[c(c(2:5),c(7:15))]
# 包含定性变量拟合模型，R^2为0.7406，CHAS变量不能剔除
lm <- lm(MEDV~.,data)
summary(lm)
# 不包含定性变量CHAS直接拟合模型，R^2为0.7355
dataEXchas <- data[c(c(1:3),c(5:13))]
lmEXchas <- lm(MEDV~.,dataEXchas)
summary(lmEXchas)
# 方差分析 全部通过显著性检验
anova(lm)
?dirname
dirname()
dirname(parent.frame(2)$ofile)
setwd("C:/Users/caokefan/Desktop/regression")
data <- read.csv('BostonHousePrice.csv')
data <- data[c(c(2:5),c(7:15))]
# 包含定性变量拟合模型，R^2为0.7406，CHAS变量不能剔除
lm <- lm(MEDV~.,data)
summary(lm)
# 不包含定性变量CHAS直接拟合模型，R^2为0.7355
dataEXchas <- data[c(c(1:3),c(5:13))]
lmEXchas <- lm(MEDV~.,dataEXchas)
summary(lmEXchas)
# 方差分析 全部通过显著性检验
anova(lm)
lm.for <- step(lm,direction = "backward")
summary(lm.for)
datafor <- data[c(c(1:2),c(4:5),c(7:13))]
#多重共线性检验 RAD和TAX的方差扩大因子较大，相关系数0.91,RAD和TAX存在多重共线性
vif(lm.for)
cor(data$RAD,data$TAX)
datafor <- data[c(c(1:2),c(4:5),c(7:13))]
#多重共线性检验 RAD和TAX的方差扩大因子较大，相关系数0.91,RAD和TAX存在多重共线性
vif(lm.for)
cor(datafor$RAD,datafor$TAX)
datas <- data.frame(scale(datafor))
ridge <- lm.ridge(MEDV~.-1,data=datas,lambda = seq(0,200,10))
beta <- coef(ridge)
beta
k <- ridge$lambda
plot(k,k,type="n",xlab="岭参数",ylab="岭回归系数",ylim=c(-0.5,0.5))
linetype <- c(1:10)
char <- c(18:27)
for (i in 1:10)
lines(k, beta[,i], type="o", lty = linetype[i], pch = char[i], cex = 0.75)
legend(locator(1),inset = 0.5, legend = c("CRIM","ZN","CHAS","RM","DIS",
"RAD","TAX","PTRATIO","B","LSTAT"),
cex = 0.56, pch = char, lty = linetype)
datas <- data.frame(scale(datafor))
ridge <- lm.ridge(MEDV~.-1,data=datas,lambda = seq(0,200,10))
beta <- coef(ridge)
beta
k <- ridge$lambda
plot(k,k,type="n",xlab="岭参数",ylab="岭回归系数",ylim=c(-0.5,0.5))
linetype <- c(1:10)
char <- c(18:27)
for (i in 1:10)
lines(k, beta[,i], type="o", lty = linetype[i], pch = char[i], cex = 0.75)
legend(locator(1),inset = 0.5, legend = c("CRIM","ZN","CHAS","RM","DIS",
"RAD","TAX","PTRATIO","B","LSTAT"),
cex = 0.56, pch = char, lty = linetype)
#岭迹图
datas <- data.frame(scale(datafor))
ridge <- lm.ridge(MEDV~.-1,data=datas,lambda = seq(0,200,10))
beta <- coef(ridge)
beta
k <- ridge$lambda
plot(k,k,type="n",xlab="岭参数",ylab="岭回归系数",ylim=c(-0.5,0.5))
linetype <- c(1:10)
char <- c(18:27)
for (i in 1:10)
lines(k, beta[,i], type="o", lty = linetype[i], pch = char[i], cex = 0.75)
legend(locator(1),inset = 0.5, legend = c("CRIM","ZN","CHAS","RM","DIS",
"RAD","TAX","PTRATIO","B","LSTAT"),
cex = 0.6, pch = char, lty = linetype)
# DW检验
dwtest(lm.for,alternative = "two.sided")
bc <- boxcox(MEDV~.,data = datafor,lambda = seq(-2,2,0.01))
lambda <- bc$x[which.max(bc$y)]
MEDV_bc <- (datafor$MEDV^lambda-1)/lambda
lm_bc <- lm(MEDV_bc~.-MEDV,datafor)
summary(lm_bc)
#多重共线性检验 RAD和TAX的方差扩大因子较大，相关系数0.91,RAD和TAX存在多重共线性
vif(lm.for)
abse_bc <- abs(resid(lm_bc))
vector_bc <- vector()
for (i in 1:length(field)){
print(cor.test(datafor[,i],abse_bc,method = "spearman"))
}
field <- c("CRIM","ZN","CHAS","NOX","RM","DIS","RAD","TAX","PTRATIO","B","LSTAT")
abse_bc <- abs(resid(lm_bc))
vector_bc <- vector()
for (i in 1:length(field)){
print(cor.test(datafor[,i],abse_bc,method = "spearman"))
}
abse_bc <- abs(resid(lm_bc))
vector_bc <- vector()
for (i in 1:length(field)){
print(cor.test(datafor[,i],abse_bc,method = "spearman"))
}
e <- resid(lm.for)
abse <- abs(e)
value <- as.null()
field <- c("CRIM","ZN","CHAS","NOX","RM","DIS","RAD","TAX","PTRATIO","B","LSTAT")
for (i in 1:length(field)){
a <- data.frame()
a <- cor.test(datafor[,i],abse,method = "spearman")
print(a$estimate)
if(is.null(value)){
value <- a$estimate
var <- i
}else if(value <= a$estimate){
value <- a$estimate
var <- i
}
}
var
s <-seq(-1,1,0.1)
result1 <- vector(length = 21,mode = "list")
result2 <- vector(length = 21,mode = "list")
for (j in 1 : 21)
{
w <- datafor[,var] ^ (-s[j])
lm4 <- lm(MEDV~.,weights = w,data = datafor)
result1[[j]] <- logLik(lm4)
result2[[j]] <- summary(lm4)
}
result1
s <-seq(-1,1,0.1)
result1 <- vector(length = 21,mode = "list")
result2 <- vector(length = 21,mode = "list")
for (j in 1 : 21)
{
w <- datafor[,var] ^ (-s[j])
lm4 <- lm(MEDV~.,weights = w,data = datafor)
result1[[j]] <- logLik(lm4)
result2[[j]] <- summary(lm4)
}
result1
lm.for <- step(lm,direction = "backward")
#lm.for <- step(lm,direction = "forward")
#lm.for <- step(lm,direction = "both")
summary(lm.for)
e <- resid(lm.for)
abse <- abs(e)
value <- as.null()
field <- c("CRIM","ZN","CHAS","RM","DIS","RAD","TAX","PTRATIO","B","LSTAT")
for (i in 1:length(field)){
a <- data.frame()
a <- cor.test(datafor[,i],abse,method = "spearman")
print(a$estimate)
if(is.null(value)){
value <- a$estimate
var <- i
}else if(value <= a$estimate){
value <- a$estimate
var <- i
}
}
var
View(datafor)
# 寻找最优权函数
s <-seq(-2,2,0.2)
result1 <- vector(length = 21,mode = "list")
result2 <- vector(length = 21,mode = "list")
for (j in 1 : 21)
{
w <- datafor[,var] ^ (-s[j])
lm4 <- lm(MEDV~.,weights = w,data = datafor)
result1[[j]] <- logLik(lm4)
result2[[j]] <- summary(lm4)
}
result1
result2[9]
lmQual <- lm(MEDV~.+I(CRIM*CHAS)+I(ZN*CHAS)+I(NOX*CHAS)+I(RM*CHAS)+I(DIS*CHAS)
+I(RAD*CHAS)+I(TAX*CHAS)+I(PTRATIO*CHAS)+I(B*CHAS)+I(LSTAT*CHAS),data)
summary(lmQual)
lmQual <- lm(MEDV~.+I(CRIM*CHAS)+I(ZN*CHAS)+I(RM*CHAS)+I(DIS*CHAS)+I(RAD*CHAS)
+I(TAX*CHAS)+I(PTRATIO*CHAS)+I(B*CHAS)+I(LSTAT*CHAS),data)
summary(lmQual)
lm <- lm(MEDV~.,data)
summary(lm)
anova(lm)
dataFrame <- data.frame(data)
lmframe <- lm(MEDV~.,data = dataFrame)
e <- resid(lmframe,digits = 5)
e2 <- e^2
data2 <- data.frame(datafor,e2)
lm2 <- lm(e2~.,data = data2)
an1 <- anova(lm2)
an1
View(an1)
lmQual <- lm(MEDV~.+I(CRIM*CHAS)+I(ZN*CHAS)+I(RM*CHAS)+I(DIS*CHAS)+I(RAD*CHAS)
+I(TAX*CHAS)+I(PTRATIO*CHAS)+I(B*CHAS)+I(LSTAT*CHAS),datafor)
summary(lmQual)
bc <- boxcox(MEDV~.,data = datafor,lambda = seq(-2,2,0.01))
lambda <- bc$x[which.max(bc$y)]
MEDV_bc <- (datafor$MEDV^lambda-1)/lambda
lm_bc <- lm(MEDV_bc~.-MEDV,datafor)
summary(lm_bc)
lambda
View(an1)
data1 <- data.frame(data)
lm1 <- lm(MEDV~.,data = data1)
e <- resid(lm1,digits = 5)
e2 <- e^2
data2 <- data.frame(datafor[,1:10],e2)
lm2 <- lm(e2~.,data = data2)
an1 <- anova(lm2)
View(an1)
abse_bc <- abs(resid(lm_bc))
for (i in 1:length(field)){
cort[[i]] <- cor.test(datafor[,i],abse_bc,method = "spearman")
}
cort <- vector(length = length(field),mode = "list")
abse_bc <- abs(resid(lm_bc))
for (i in 1:length(field)){
cort[[i]] <- cor.test(datafor[,i],abse_bc,method = "spearman")
}
cort[1]
cort <- vector(length = length(field),mode = "list")
abse_bc <- abs(resid(lm_bc))
for (i in 1:length(field)){
cort[i] <- cor.test(datafor[,i],abse_bc,method = "spearman")
}
cort[1]
cort <- vector(length = length(field),mode = "list")
abse_bc <- abs(resid(lm_bc))
for (i in 1:length(field)){
cort[[i]] <- cor.test(datafor[,i],abse_bc,method = "spearman")
}
cort[[1]]
?runs
?runs.test()
library(lawstat)
?runs.test()
?lawstat
??lawstat
install.packages("tseries")
?runs.test()
